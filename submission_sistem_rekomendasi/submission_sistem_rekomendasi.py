# -*- coding: utf-8 -*-
"""submission_sistem_rekomendasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19imTqmHdB8KaDW88pVVx-m_SrvJWEouA

Import library yang akan digunakan untuk memproses data
"""

import numpy as np
import pandas as pd

"""Membaca data dari file csv dan menampilkan ringkasan dari data"""

books = pd.read_csv('/content/goodreads_data.csv')
books

"""Menghapus kurung di awal dan di akhir data pada kolom Genres"""

books.Genres = books.Genres.str[1:-1]

print(books.Book[0])
books.Genres[0]

print(books.Book[2])
books.Genres[2]

"""Menampilkan 5 data teratas."""

books.head()

"""Menampilkan berapa banyak jenis buku dan genres"""

print('Banyak buku: ', len(books.Book.unique()))
print('Banyak Genres: ', len(books.Genres.unique()))

"""Menampilkan jenis genres yang berbeda-beda"""

print('Jenis Genres: ', books.Genres.unique())

"""Menampilkan info singkat pada data"""

books.info()

"""Menampilkan ringkasan nilai pada data, yang menjadi titik fokus pada nilai min dan max"""

books.Avg_Rating.describe()

"""Mengecek berapa banyak nilai null pada data"""

books.isnull().sum()

"""Membuat dataset baru berdasarkan kolom data yang ingin digunakan"""

new_book = books[['Author','Book','Genres','Avg_Rating']]
new_book

"""Melakukan teknik TF-IDF untuk rekayasa fitur teks"""

data = new_book
data.sample(5)

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data genres
tf.fit(data['Genres'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""Melakukan fit transform agar nilai vektor menjadi matrix lalu menampilkan banyak baris dan kolomnya."""

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['Genres'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""Mengubah vektor tf-idf dalam bentuk matriks"""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""Membuat dataframe baru untuk menampikan nilai berdasarkan judul buku dengan genrenya"""

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis masakan
# Baris diisi dengan nama resto

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.Book
).sample(22, axis=1).sample(10, axis=0)

"""Menampilkan derajat kesamaan antara buku dengan buku lainnya."""

from sklearn.metrics.pairwise import cosine_similarity

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Menampikan derajat kesamaan antar buku"""

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul buku
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Book'], columns=data['Book'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(10, axis=1).sample(10, axis=0)

def book_recommendations(judul_buku, similarity_data=cosine_sim_df, items=data[['Book', 'Genres']], k=10):
    """
    Rekomendasi Buku berdasarkan kemiripan dataframe

    Parameter:
    ---
    book : tipe data string (str)
                Judul Buku (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan buku sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,judul_buku].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop judul buku agar judul buku yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(judul_buku, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Menampilkan buku yang akan menjadi dasar untuk mendapatkan rekomendasi pada buku lain."""

data[data.Book.eq('Train Dreams')]

"""Menampikan rekomendasi buku berdasarkan model yang telah didapatkan sebelumnya"""

# Mendapatkan rekomendasi buku
book_recommendations('Train Dreams')